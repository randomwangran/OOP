* L139 Creat default sub objects in C++
** goal

   Refactoring the code so that the aiming log is a separated class.

** result
   
   [[file:Source/screenCapture/tankBodyOutPutCorrectAimingLocation.png]]

** notes
** question that I do not understand
*** UE4 .19 crash when try to access directly from 'GetAimingComponent' class
**** asked question

    [[https://www.udemy.com/unrealcourse/learn/v4/questions/5772629][My question url]]
    
    When I try to get the owner of the 'aiming component', the UE
    crush without any info. The bad code is
    [here](https://github.com/randomwangran/cpp/blob/4903f7304a0c02b15983c36c88ffa025a503753a/Unreal/Section04/Source/BattleTank/Private/TankAIController.cpp)

    My question is simple: why UE4 crash (compiled successfuly but
    crash when Play game) without providing any infomation?

    In my bad code: I try to access different
    children (ATank and UTankAimingComponent) who share the parent
    (AActor).

    This is not accessible, and the compile should complain about the
    wrong useage instead of crashing without any infomation.

    Why this happen?

    For the details of this issue, following is the analyse of my bad
    code.

**** Daniel's reply

     Since ~GetControlledTank~ is a pointer of ~UTankAimingComponent~,
     which is derived from ~ATankAIController

     This is not correct. UTankAimingComponent is not derived from
     ATankAIController, they are unrelated.

     As you can see ~Tank~ and ~UTankAimingComponent~ has a same parent
     ~AActor~. This is the moment I make a huge mistake: different children
     cannot access each other even they share the parrent.

     What do you mean by this? It seems like you're confusing the
     class hierarchy with the actual instances of those classes.

     ===================

     #+BEGIN_SRC 
     ATank* ATankAIController::GetControlledTank() const
     {
         return Cast<ATank>(GetPawn());
     }
     #+END_SRC
 
     UTankAimingComponent* ATankAIController::GetAimingComponent()
     const { return Cast<UTankAimingComponent>(GetPawn()); } The first
     function is correct the second is not. GetPawn returns a pointer
     to the same object, casting it doesn't magically make it get the
     thing that you're looking for, it just says treat it as if it
     were this type instead. It compiles because the class hierarchy
     you described, APawn and UTankAimingComponent share a common base
     class though this isn't what you want to do.

     Consider the following

     #+BEGIN_SRC 
     class AAnimal{};
     class ACat : public AAnimal{ /*code*/ };
     class ADog : public AAnimal{ /*code*/ };
 
     ADog* GetDog();
 
     void DoSomething(AAnimal* Animal)
     {
         ACat* Cat = Cast<ACat>(Animal);
         Cat->Meow();
     }
     
     int main(){ 
         ADog* Dog = GetDog(); 
	 DoSomething(Dog); 
     }
     #+END_SRC
 
     The DoSomething function takes an AAnimal but then casts it to
     ACat*, in main I give it a ADog* which means the cast will fail
     and attempting to dereference it on the next line after the cast
     will be undefined behaviour (crash in Unreal) because Cat will be
     nullptr since the cast failed.

     
     TankAimingComponent is a protected member of ATank and should
     remain protected, what you're trying to accomplish would mean
     creating a function on ATank that returns the
     TankAimingComponent. Meaning the code you should have by the end
     would be

     #+BEGIN_SRC 
     GetControlledTank()->GetAimingComponent()->AimAt(HitLocation);
     #+END_SRC
     
**** my 2nd reply

     Thank you Daniel for helping me though. I am relatively new to cpp
     programming and want to become a better coder using c++. I've
     read your reply and did some further research. Following is some
     thing that I still not very clear.

     #+BEGIN_QUOTE
     Since ~GetControlledTank~ is a pointer of ~UTankAimingComponent~,
     which is derived from ~ATankAIController
     
     This is not correct. UTankAimingComponent is not derived from
     ATankAIController, they are unrelated.
     #+END_QUOTE

     Thanks for pointing out my mistake. ~UTankAimingComponent~ is not
     derived from ~ATankAIController~. It is drived from
     ~UActorComponent~. Then ~-> UObject -> UObjectBaseUtility ->
     UObjectBase~. 

     On the other hand, the inheritance hierarchy for ~ATank~ is:

     #+BEGIN_SRC c++
     ATank -> APawn -> AActor -> UObject -> UObjectBaseUtility ->
     UObjectBase
     #+END_SRC
     
     What I wanted to point out in the last post was that
     ~UTankAimingComponent~ and ~ATank~ shared the same parent
     according to the inheritance hierarchy. (~UObject~). 

     #+BEGIN_QUOTE
     As you can see ~Tank~ and ~UTankAimingComponent~ has a same parent
     ~AActor~. This is the moment I make a huge mistake: different children
     cannot access each other even they share the parrent.
     
     What do you mean by this? It seems like you're confusing the
     class hierarchy with the actual instances of those classes.
     #+END_QUOTE
     

     What I mean was that, at that time, I thought as long as two
     class shared the same parent at some levels in the inheritance
     hierarchy, they could access to each other. Now I know that this
     is wrong! You can not do that. For example, my parents have three
     children. I am one of them. Even I share the same parent as my
     brother, I cannot access my brother' brain, which is his private
     function.

     The new issue is: can children class access the public function
     or variables in their parent class? I suspect the answer is yes!

     If ~void UTankAimingComponent::AimAt(FVector HitLocation)~ is
     something like ~void UObject::AimAt(FVector HitLocation)~ and
     they are public inherit from upper parents till the same parent
     (~UObject~). Then both ~Tank~ and ~UTankAimingComponent~ can
     access this ~AimAt~ function.

     #+BEGIN_QUOTE
     #+BEGIN_SRC c++
     ATank* ATankAIController::GetControlledTank() const
     {
         return Cast<ATank>(GetPawn());
     }
     #+END_SRC

     UTankAimingComponent* ATankAIController::GetAimingComponent()
     const { return Cast<UTankAimingComponent>(GetPawn()); } The first
     function is correct the second is not. GetPawn returns a pointer
     to the same object, casting it doesn't magically make it get the
     thing that you're looking for, it just says treat it as if it
     were this type instead. It compiles because the class hierarchy
     you described, APawn and UTankAimingComponent share a common base
     class though this isn't what you want to do.
     #+END_QUOTE

     I am just curious about why 

     #+BEGIN_SRC 
     UTankAimingComponent* ATankAIController::GetAimingComponent() const { 
         return Cast<UTankAimingComponent>(GetPawn()); 
     }
     #+END_SRC

     not work, but it works for ~ATank*~?

     I jump into the source code of ~GetPawn()~:

     #+BEGIN_SRC c++ 
     /** Getter for Pawn */
     FORCEINLINE APawn* GetPawn() const { return Pawn; }
     #+END_SRC

     The ~ATank~ is okay because ~ATank~ is drived from
     ~APawn~. ~UTankAimingComponent~ fails, becasue its base does not
     include ~APawn~.

     Thanks for pointing out this point. The reason why the compiler
     did not complain was that they share a common base class:
     ~UObject~.

     When I was writing the code like:

     ~return Cast<ATank>(GetPawn());~

     It is natually to think that ~GetPawn()~ should find it's Pawn,
     especially when it is a request from a component. Unreal should
     be able to understand my intention. Why they did not implement
     this straigthforward thought? Do I miss something?

     #+BEGIN_QUOTE
     Consider the following

     #+BEGIN_SRC 
     class AAnimal{};
     class ACat : public AAnimal{ /*code*/ };
     class ADog : public AAnimal{ /*code*/ };

     ADog* GetDog();

     void DoSomething(AAnimal* Animal)
     {
         ACat* Cat = Cast<ACat>(Animal);
         Cat->Meow();
     }

     int main(){ 
         ADog* Dog = GetDog(); 
         DoSomething(Dog); 
     }
     #+END_SRC

     The DoSomething function takes an AAnimal but then casts it to
     ACat*, in main I give it a ADog* which means the cast will fail
     and attempting to dereference it on the next line after the cast
     will be undefined behaviour (crash in Unreal) because Cat will be
     nullptr since the cast failed.
     #+END_QUOTE
     
     Thanks for providing the code snippet. It really helps me to
     understand.

     I think ~Cast~ function you provided here make sense. I just want
     to use your ~DoSomething~ function to make an another example. In
     reality ~DoSomething~ is ~Speaking~. When ~ADog~ call
     ~DoSoething~ or ~Speaking~, the program should always return ~Wof
     Wof~. If someone new programmer (like me) screw it up by using
     the ~Cast~ function, the program should immediately stop. If the
     programmer really want to let ~ADog~ pronounce ~Meow Meow~, it is
     the programmer's responsibilty to implement a new virtual
     function in the Base class ~AAnimal~ called:
     ~DogMimicCatSpeaking~. And then use this new function from ~ADog~
     to print out the desired behvior, i.e. print out ~Meow Meow~.

     However, you can see, by adding this new function
     (~DogMimicCatSpeaking~), I polluted the our Base class ~AAnimal~,
     which should not deal with making specific sound. This function
     should be implement in the derived class.

     For ~Cast~ in c++, I've learn that: everytime you cast something,
     you have to make sure that it is succeeded. To achieve this:

     #+BEGIN_SRC c++
     void DoSomething(AAnimal* Animal)
     {
         ACat* Cat = Cast<ACat>(Animal);
	 
	 if(Cat) // adding a checker to protect potential crash
             Cat->Meow();
     }
     #+END_SRC

     After playing with ~Cast~, I started to wondering which ~Cast~ is
     used in Unreal?

     There are many Cast types in c++:

     - dynamic_cast
     - static_cast
     - ... (perheps more)

     
     In the head file ~Casts.h~

     #+BEGIN_SRC c++
     // Dynamically cast an object type-safely.
     template <typename To, typename From>
     FORCEINLINE To* Cast(From* Src)
     {
         return TCastImpl<From, To>::DoCast(Src);
     }
     #+END_SRC c++

     What does it mean? Is ~Cast~ in the following code a dynamic
     casting, which will convert the base-class pointer into
     derived-class pointer?
     
     #+BEGIN_SRC c++
     ATank* ATankAIController::GetControlledTank() const
     {
         return Cast<ATank>(GetPawn());
     }
     #+END_SRC

     It seems yes, but why don't we use?

     #+BEGIN_SRC c++
     return dynamic_cast<ATank*>(GetPawn());
     #+END_SRC
     
     #+BEGIN_QUOTE
     TankAimingComponent is a protected member of ATank and should
     remain protected, what you're trying to accomplish would mean
     creating a function on ATank that returns the
     TankAimingComponent. Meaning the code you should have by the end
     would be
     #+BEGIN_SRC 
     GetControlledTank()->GetAimingComponent()->AimAt(HitLocation);
     #+END_SRC     
     #+END_QUOTE
     

     I use your suggestoin in ~TankAIController.cpp~ in my commit: https://github.com/randomwangran/cpp/blob/4903f7304a0c02b15983c36c88ffa025a503753a/Unreal/Section04/Source/BattleTank/Private/TankAIController.cpp

     #+BEGIN_SRC c++
     void ATankAIController::Tick(float DeltaTime)
     {
	Super::Tick(DeltaTime);
	if (GetPlayerTank())
	{
		// TODO Move towards the player
		
		// Aim towards the player
		GetControlledTank()->GetAimingComponent()->AimAt(HitLocation);
	}
     }
     #+END_SRC

     But fail to compile:

     #+BEGIN_SRC 
     CompilerResultsLog: Error: ~\\Unreal\Section04\Source\BattleTank\Private\TankAIController.cpp(32) : error C2039: 'GetAimingComponent': is not a member of 'ATank'
     CompilerResultsLog: Error: ~\unreal\section04\source\battletank\public\Tank.h(10) : note: see declaration of 'ATank'
     CompilerResultsLog: Error: ~\\Unreal\Section04\Source\BattleTank\Private\TankAIController.cpp(32) : error C2065: 'HitLocation': undeclared identifier
     CompilerResultsLog: ERROR: UBT ERROR: Failed to produce item: ~\\Unreal\Section04\Binaries\Win64\UE4Editor-BattleTank-685.dll
     #+END_SRC

     GetAimingComponent is not a member of ~ATank~

     My solution is different from Ben's solution: https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/Tank.cpp

     I don't declare in my ~Tank.h~:

     #+BEGIN_SRC 
     void ATank::AimAt(FVector HitLocation)
     {
	TankAimingComponent->AimAt(HitLocation);
     }
     #+END_SRC

     Because when I accepted his challenge, I think I need to
     completely refactor ~AimAt~ function in the
     ~UTankAimingComponent.h~

     I succesfully made it in my commit:
     
     https://github.com/randomwangran/cpp/commit/b3c8415642f7a2ac0fc0a7a77126ddd45a4ba043
     

     This is really a long reply, but I've learn a lot of new stuff
     and refesh my mind on old stuff. I hope it is not daunting you.

     Ran

**** Daniel's 2nd reply
     
     > If void UTankAimingComponent::AimAt(FVector HitLocation) is something like void UObject::AimAt(FVector HitLocation)

     It's not, we defined it in UTankAimingComponent so it's not in
     any parent class. This is the first instance of it.
     
     > It is natually to think that GetPawn() should find it’s Pawn  especially when it is a request from a component. Unreal should be able to understand my intention. Why they did not implement this straigthforward thought? Do I miss something?
     
     Getters don't *find*, they **get**. Controllers control pawns so
     by nature they hold a pointer to the pawn they are controlling.
     If you want an analogy think of a remote control car. That car
     has a remote control that controls it. In code that would mean
     storing a pointer to that car to be able to perform actions on it
     like move it when you give it input to do so.
     
     Extending that analogy to what you're doing with the casting is
     trying to treat that car to be a wheel. They share a common
     abstract idea that they are things that exist in the world but
     are otherwise somewhat unrelated.
     
     In code
     ```cpp
     
     class ARCController : public AActor
     {
     public:
     GetCar() const { return Car; } 
     private:
     ACar* Car;
     };
     
     class ACar : public APawn
     {
     TArray<UWheel> Wheels;
     };
     ```
     
     `GetCar` gets the car the controller controls. All casts do is treat this type as if it were that type so casting it to UWheel isn't going to magically get you a component on the car.
     Think about it if it worked the way you think it does then imagine not having an array of wheels but 4 separate UWheel pointers. Which one would the cast supposed give you?
     
     ==========
     
     ```cpp
     static To* DoCast(UObject* Src)
     {
     return Src && Src->IsA<To>() ? (To*)Src : nullptr;
     }
     ```
     Unreal Casts do runtime checks to see if the `From` is a child of `To`, if it is it then performs a C-Style cast which basically just picks whichever cast that works. Otherwise it returns `nullptr`
     
     Also I was wrong earlier about "It compiles because the class hierarchy you described". I thought Unreal also did compile time checks as well but it does not.
     It compiles because you can cast a pointer to any other type of pointer which using C++'s named casts would be a reinterpret_cast.
     
     > It seems yes, but why don’t we use dynamic_cast? 
     
     Refer to this https://forums.unrealengine.com/development-discussion/c-gameplay-programming/40599-casting-c-syntax-and-ue-syntax
     
     > I use your suggestoin in TankAIController.cpp in my commit: 
     
     "what you’re trying to accomplish would mean **creating a function on ATank** that returns the TankAimingComponent"
     You didn't create the function I said you should create.

**** my 3rd reply

     Since there are many sub-questions, I divided it into sub-tree to
     study the confusion after reading your reply.

***** where to define ~AimAt~ function

      In my previous post, I made a speculation of where to define ~AimAt~:

      #+BEGIN_QUOTE
      
      If ~void UTankAimingComponent::AimAt(FVector HitLocation)~ is
      something like ~void UObject::AimAt(FVector HitLocation)~ and
      they are public inherit from upper parents till the same parent
      (~UObject~). Then both ~Tank~ and ~UTankAimingComponent~ can
      access this ~AimAt~ function.

      #+END_QUOTE

      The reason why I make this speculation is that I cannot compile
      my code if ~AimAt~ is not declared in ~Tank.h~.

      I've checked Ben's solution (~54f0adb~). I saw the ~AimAt~
      function was defined in two places:

      - [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/Tank.cpp#L38][Tank.cpp]]

      - [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/TankAimingComponent.cpp#L37][TankAimingComponent.cpp]]

      Is this redundant? Correct me if I am wrong.

      Different from Ben's solution, [[https://github.com/randomwangran/cpp/blob/b3c8415642f7a2ac0fc0a7a77126ddd45a4ba043/Unreal/Section04/Source/BattleTank/Public/Tank.h][in my solution]], I did not declare
      it in ~Tank.cpp~, but only defined it in ~TankAimingComponent.cpp~.

      The direct method to test my speculation is to write ~AimAt~
      function in ~UObject~, then see what will happen.

      However, you suggested: 

      #+BEGIN_QUOTE
      It's not, we defined it in UTankAimingComponent so it's not in any parent class. This is the first instance of it.
      #+END_QUOTE

      ~AimAt~ function is indeed defined in ~UTankAimingComponent~,
      but in Ben's solutuion
      ~54f0adbad057940cb229f4541a727f2383b53e9b~, it is defined twice
      in: (as I previous pointed out):

      - [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/Tank.cpp#L38][Tank.cpp]]

      - [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/TankAimingComponent.cpp#L37][TankAimingComponent.cpp]]


      So, in the compile time, it is naturally to ask:

      Which ~AimAt~, i.g. [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/TankAIController.cpp#L31][~AI~]] and [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/TankPlayerController.cpp#L40][Player]], the program is calling.

      Than answer, to me, is simple: it is the
      [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/TankAimingComponent.cpp#L37][TankAimingComponent.cpp]], because it print out the name and
      location of the tank. 

      My confusion is, do we need the extra definition of ~AimAt~
      function in [[https://github.com/UnrealCourse/04_BattleTank/blob/54f0adbad057940cb229f4541a727f2383b53e9b/BattleTank/Source/BattleTank/Private/Tank.cpp#L38][Tank.cpp]]? Why we need? If not, delete it would be a
      better choice?

***** Getter and analogy
      
      #+BEGIN_QUOTE
      Getters don't *find*, they **get**.
      #+END_QUOTE

      I agree with you. That's what the ~Getters~ supposed to do. The
      instruction of ~find~ should be given by other method.
      
      I've check UE4's source code, 

      #+BEGIN_SRC c++
      /** Getter for Pawn */
	FORCEINLINE APawn* GetPawn() const { return Pawn; }
      #+END_SRC

      ~GetPawn()~ return a ~APawn~ pointer.

      At this moment, I start to think that why ~UTankAimingComponent~

      is not inherit from ~ATank~ but instead:

      #+BEGIN_SRC c++
      class BATTLETANK_API UTankAimingComponent : public UActorComponent      
      #+END_SRC

      So I review some basics of ~inheritance~ in c++, and I found
      that:

      When build a complex classes, you have two major ways to do so:

      - object composition
      - inheritance

      Object composition can be easily identified by ~has-a~
      relation. In my ~old mind~, I insisted ~UTankAimingComponent~
      should inherit from ~ATank~, which is not correct.

      A Tank ~has~ many components (aimming, moving, comunication,
      protection, etc...), in our game, ~ATank~ has
      ~UTankAimingComponent~.

      So, I figure out what was wrong.	

** a-ha moment
*** pointer to pointer

    This is the first time that I use it intentionlly in real
    programming, and it is in this lesson, that I've learnt that it is
    useful when you want to separate a function in a class.

    I've stuck in this issue for a long time. At first, I think I
    should write another getter to return a 'UTankAimingComponent'
    pointer so that the tank can use ~AimAt~ method defined in
    'UTankAimingComponent' class.

    #+BEGIN_SRC c++
    UTankAimingComponent* ATankAIController::GetAimingComponent() const
    {
        return Cast<UTankAimingComponent>(GetPawn());
    }
    #+END_SRC

    However, when I call ~GetAimingComponent~ From class
    ~TankAIController~, the code compiled, which is the result of
    commit ~4903f7304a0c02b15983c36c88ffa025a503753a~. But as soon as
    I click ~Play~ button, UE4 crash without any information.

    Since ~GetControlledTank~ is a pointer of ~UTankAimingComponent~,
    which is derived from ~ATankAIController~. And ~ATankAIController~
    is drived from ~AAIController~. Then, ~AAIController~ is drived
    from ~AController~. Next, ~AController~ is drived from
    ~AActor~. Then, ~AActor~ is drived from ~UObject~ is drived from
    ~UObjectBaseUtility~. Finally ~UObjectBaseUtility~ is drived from
    ~UObjectBase~.

    The diagram for the ~Tank~ class is:

    #+BEGIN_CENTER
    ATank --> APawn --> AActor --> ...
    #+END_CENTER

    As you can see ~Tank~ and ~UTankAimingComponent~ has a same parent
    ~AActor~. This is the moment I make a huge mistake: different
    children cannot access each other even they share the parrent.

    The correct way to do this to using
    ~GetControlledTank()->TankAimingComponent->AimAt(GetPlayerTank()->GetActorLocation());~
    , i.e., the pointer to pointer, which will correct guide the
    ~Tank~ class's instance (AI tanks and Player tank) to use the the
    ~AimAt~ method defined in the separated class ~UTankAimingComponent~.


