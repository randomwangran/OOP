* [[http://cfd-china.com/topic/2191/openfoam%E5%91%A8%E6%9C%9F%E8%BE%B9%E7%95%8C%E7%94%9F%E6%88%90%E4%B8%8D%E6%88%90%E5%8A%9F-cyclic%E7%9A%84%E9%97%AE%E9%A2%98][why mesh not pass]]

  I am using OF-dev version (don't know exactly the date I downloaded
  it).

  The main classes are found in the flowing path:

  #+BEGIN_SRC 
  ~/OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/  
  #+END_SRC

  This for loop:

  #+BEGIN_SRC c++
  //Line 707
  //~/OpenFOAM-dev/applications/utilities/mesh/manipulation/createPatch/createPatch.C

  void changePatchID
(
    const polyMesh& mesh,
    const label faceID,
    const label patchID,
    polyTopoChange& meshMod
)
  #+END_SRC
  
  is the point that I feel something might wrong.
  
  I don't know exactly what ~polyModifyFace~ is a function or a
  class. I double checked the defination of ~polyModifyFace~:

  #+BEGIN_SRC c++
  //Line 82
  //~OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/polyModifyPoint.H
  meshMod.setAction
    (
        polyModifyFace
        (
            mesh.faces()[faceID],               // face
            faceID,                             // face ID
            mesh.faceOwner()[faceID],           // owner
            -1,                                 // neighbour
            false,                              // flip flux
            patchID,                            // patch ID
            false,                              // remove from zone
            zoneID,                             // zone ID
            zoneFlip                            // zone flip
        )
    );
  #+END_SRC

  I think ~polyModifyFace~ really looks like a function definitio in
  c++, but I migth wrong.
  
  Another thing that I feel strange is that the implymentation of the
  following classes are missing.

  #+BEGIN_SRC 
  3.5k 12-14 23:52 polyModifyCell.H
  7.5k 12-14 23:52 polyModifyFace.H
  4.2k 12-14 23:52 polyModifyPoint.H
  #+END_SRC

  Is that becasue those classes are too easy?

  I furthe study the class (~/OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/polyModifyFace.H):


  #+BEGIN_SRC c++
        //- Construct and return a clone
        virtual autoPtr<topoAction> clone() const
        {
            return autoPtr<topoAction>(new polyModifyFace(*this));
        }
  #+END_SRC

  Is this ~clone()~ function mess up all the things? If so, what's the
  limited of it? How big (size of the mesh) the OF can handle?

  I agree with you. This mesh is converted from *.msh file without any
  issue. ~convertMesh~ seems have a much large memery requirment. I am
  not sure exactly the order of it.

  What I want to do, is to run some small test to investigate the
  memery usage of ~convertMesh~ and ~creatPatch~.

  Finally, why make it (~matchToTolerance~) smaller? Do you have any
  reference to this point? I might (can remember exactly) just use
  some default number here.
  
** 2nd round

   The reason why I checked ~polyModifyFace~ was that I wanted to study
   the piece of code in:
  #+BEGIN_SRC c++
  //Line 82
  //~OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/polyModifyPoint.H [wrong!]
  ///OpenFOAM-dev/applications/utilities/mesh/manipulation/createPatch/createPatch.C [correct]
  meshMod.setAction
    (
        polyModifyFace
        (
            mesh.faces()[faceID],               // face
            faceID,                             // face ID
            mesh.faceOwner()[faceID],           // owner
            -1,                                 // neighbour
            false,                              // flip flux
            patchID,                            // patch ID
            false,                              // remove from zone
            zoneID,                             // zone ID
            zoneFlip                            // zone flip
        )
    );
  #+END_SRC

  I don't know the reason why it crash, that's why I am asking.

  #+BEGIN_SRC c++
  return autoPtr<topoAction>(new polyModifyFace(*this));
  #+END_SRC

  Do you know how this function could trigger the following exception:

  #+BEGIN_SRC c++
  terminate called after throwing an instance of 'std::bad_array_new_length'
  what():  std::bad_array_new_length
  #+END_SRC

  I don't know.
  
  @wwzhao thanks for helping. This test case was built ~Jul 06 2018~,
  so I am not sure the exactly envirmental varibles that I was playing with.

  I've double checked the:

  #+BEGIN_SRC sh
  echo $WM_LABEL_SIZE
  32
  #+END_SRC

  It looks like a right direction to further study this stuff. But, it
  needs more time, since I need to rebuid OF. Which Version would you
  like to suggest me to run? dev or v4.1?

  Also, if the default $WM_LABEL_SIZE is indeed 32, what is its
  theoretical upper limmited, i.e. running pisoFoam (motobike tutorial?).

  Can I change to any number (2^{5,6,7,8})?

** reply to wwzhao: study $WM_LABEL_SIZE

   What is the meaning of:

   #+BEGIN_QUOTE
   label representing for the sizes of point, face, and cell.
   #+END_QUOTE

   I read this book: The OpenFOAM technology primer. On page, 41, in
   the paragrah: points, the last sentence writes:

   #+BEGIN_QUOTE
   The position is stored as ~label~
   #+END_QUOTE

   

