* [[http://cfd-china.com/topic/2191/openfoam%E5%91%A8%E6%9C%9F%E8%BE%B9%E7%95%8C%E7%94%9F%E6%88%90%E4%B8%8D%E6%88%90%E5%8A%9F-cyclic%E7%9A%84%E9%97%AE%E9%A2%98][why mesh not pass]]
** DONE initial asking
   I am using OF-dev version (don't know exactly the date I downloaded
   it).

   The main classes are found in the flowing path:

   #+BEGIN_SRC 
   ~/OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/  
   #+END_SRC

   This for loop:

   #+BEGIN_SRC c++
   //Line 707
   //~/OpenFOAM-dev/applications/utilities/mesh/manipulation/createPatch/createPatch.C

   void changePatchID
 (
     const polyMesh& mesh,
     const label faceID,
     const label patchID,
     polyTopoChange& meshMod
 )
   #+END_SRC
  
   is the point that I feel something might wrong.
  
   I don't know exactly what ~polyModifyFace~ is a function or a
   class. I double checked the defination of ~polyModifyFace~:

   #+BEGIN_SRC c++
   //Line 82
   //~OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/polyModifyPoint.H
   meshMod.setAction
     (
         polyModifyFace
         (
             mesh.faces()[faceID],               // face
             faceID,                             // face ID
             mesh.faceOwner()[faceID],           // owner
             -1,                                 // neighbour
             false,                              // flip flux
             patchID,                            // patch ID
             false,                              // remove from zone
             zoneID,                             // zone ID
             zoneFlip                            // zone flip
         )
     );
   #+END_SRC

   I think ~polyModifyFace~ really looks like a function definitio in
   c++, but I migth wrong.
  
   Another thing that I feel strange is that the implymentation of the
   following classes are missing.

   #+BEGIN_SRC 
   3.5k 12-14 23:52 polyModifyCell.H
   7.5k 12-14 23:52 polyModifyFace.H
   4.2k 12-14 23:52 polyModifyPoint.H
   #+END_SRC

   Is that becasue those classes are too easy?

   I furthe study the class (~/OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/polyModifyFace.H):


   #+BEGIN_SRC c++
         //- Construct and return a clone
         virtual autoPtr<topoAction> clone() const
         {
             return autoPtr<topoAction>(new polyModifyFace(*this));
         }
   #+END_SRC

   Is this ~clone()~ function mess up all the things? If so, what's the
   limited of it? How big (size of the mesh) the OF can handle?

   I agree with you. This mesh is converted from *.msh file without any
   issue. ~createPatch~ seems have a much large memery requirment. I am
   not sure exactly the order of it.

   What I want to do, is to run some small test to investigate the
   memery usage of ~convertMesh~ and ~creatPatch~.

   Finally, why make it (~matchToTolerance~) smaller? Do you have any
   reference to this point? I might (can remember exactly) just use
   some default number here.
  
** DONE 2nd round
   The reason why I checked ~polyModifyFace~ was that I wanted to study
   the piece of code in:
  #+BEGIN_SRC c++
  //Line 82
  ///OpenFOAM-dev/applications/utilities/mesh/manipulation/createPatch/createPatch.C
  meshMod.setAction
    (
        polyModifyFace
        (
            mesh.faces()[faceID],               // face
            faceID,                             // face ID
            mesh.faceOwner()[faceID],           // owner
            -1,                                 // neighbour
            false,                              // flip flux
            patchID,                            // patch ID
            false,                              // remove from zone
            zoneID,                             // zone ID
            zoneFlip                            // zone flip
        )
    );
  #+END_SRC

  I don't know the reason why it crash, that's why I am asking.

  #+BEGIN_SRC c++
  //188
  return autoPtr<topoAction>(new polyModifyFace(*this));
  #+END_SRC

  Do you know how this function could trigger the following exception:

  #+BEGIN_SRC c++
  terminate called after throwing an instance of 'std::bad_array_new_length'
  what():  std::bad_array_new_length
  #+END_SRC

  I don't know.
  
  @wwzhao thanks for helping. This test case was built ~Jul 06 2018~,
  so I am not sure the exactly envirmental varibles that I was playing with.

  I've double checked the ~LABEL_SIZE~

  #+BEGIN_SRC sh
  echo $WM_LABEL_SIZE
  32
  #+END_SRC

  It looks like a right direction to further study this stuff. But, it
  needs more time, since I need to rebuid OF. Which Version would you
  like to suggest me to run? dev or v4.1?

  Also, if the default $WM_LABEL_SIZE is indeed 32, what is its
  theoretical upper limmited, i.e. running pisoFoam (motobike tutorial?).

  Can I change to any number (2^{5,6,7,8})?

** TODO reply to wwzhao: study $WM_LABEL_SIZE
   What is the meaning of:

   #+BEGIN_QUOTE
   label representing for the sizes of point, face, and cell.
   #+END_QUOTE

   I read this book: The OpenFOAM technology primer. On page, 41, in
   the paragrah: points, the last sentence writes:

   #+BEGIN_QUOTE
   The position is stored as ~label~;

   This (faces) is a nested list, containing one element per face.
   #+END_QUOTE

   From my understanding, one ~label~ means a single point's xyz
   location stored in the ~constant/polyMesh/points~ file.

   So, to represent a single face, one need a ~labelList~ and a
   ~labelListList~ to give sufficient info to the computer.
   
   For example, you have a point whose coordinates is (-0.0206 0
   -0.0005) and we denote it as a label, i.e., 1.

   I may constructure 4 points just what I've done. Then, I got a list
   of list: 1,2,3,and 4.

   If I have that list of list, I would say that I've already define a
   face. This is ture, as you can see the example given at page 42:

   #+BEGIN_QUOTE
   // Face 0 with it's four point labels as labelsit
   4(1 20 172 153)
   #+END_QUOTE
** DONE change from 32 to 64 not always success
   I recently read [[https://github.com/sbeamer/gapbs/issues/9][an issue]], the reporter has a similar error
   (although he used different software):

   #+BEGIN_SRC c++
   ./converter -f benchmark/graphs/raw/twitter.el -b benchmark/graphs/twitter.sg
Read Time:           57.28654
terminate called after throwing an instance of 'std::bad_array_new_length'
  what():  std::bad_array_new_length
  make: *** [benchmark/graphs/twitter.sg] Aborted
   #+END_SRC
   
   He changed the software from:
   #+BEGIN_SRC c++
   typedef int64_t NodeID;
typedef int64_t WeightT;
If I change it back to 32 bit, the error goes away.
typedef int32_t NodeID;
typedef int32_t WeightT;
   #+END_SRC

   At the end of that conversation, the reporter mentioned the reason
   why this error exists is because of the dowonloading issue by
   comparing MD5 hashes.
   
   So, I think I need further investigate this issue before I really
   made something on cluster.
** TODO what is ~clone()~
   As I further read the source code of
   ~/OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/polyModifyFace.H~

   I found myself not understand:

   #+BEGIN_SRC c++
   // 187
        //- Construct and return a clone
        virtual autoPtr<topoAction> clone() const
        {
            return autoPtr<topoAction>(new polyModifyFace(*this));
        }
   #+END_SRC

   What is meaning of this ~clone()~ function? Which class use this function?

   I later found the the class using ~clone()~:
   ~/OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/topoAction/topoAction.H~

   what does this mean?
   ~const = 0~
   #+BEGIN_SRC c++
   virtual autoPtr<topoAction> clone() const = 0;
   #+END_SRC
   
   This is a pure virtual function. but what's wrong with const? It's
   just a constant pure function. Noting that the pure virtual
   function will remind the code something wrong if s/he forget to
   implyment the function in the drived class.

   I found the following code explaining the ~const~ stuff very well.

   #+BEGIN_SRC c++
#include "pch.h"
#include <iostream>
#include <string>

class MyClass
{
private:
	int var;

public:
	void MyFunc() { var = 3; }

	void MyConstFunc() const
	{
	}

};


int main()
{
	MyClass c;

	c.MyFunc();        // ok
	c.MyConstFunc();   // ok

	const MyClass m;

	m.MyConstFunc();   // ok
	m.MyFunc();        // not ok, it's not const

}
#+END_SRC

   It looks like ~topoAction.H~ is an abstract class. In order to see
   what' really going on with ~clone()~ function
   
   I search the ~clone()~ function within the ~src~ folder.

   I goback to where I started:

   #+BEGIN_SRC c++
//187
//- Construct and return a clone
virtual autoPtr<topoAction> clone() const
{
return autoPtr<topoAction>(new polyModifyFace(*this));
}
#+END_SRC

   I then try to study ~autoPtr~:

   It seems this template is widely used in OF.

   The ~OpenFOAM-dev/src/OpenFOAM/containers/Lists/List/List.H~ is
   interesting!

   For example:

   #+BEGIN_SRC c++
   // 182  ~OpenFOAM-dev/src/OpenFOAM/containers/Lists/List/List.H
        //- Clone
        inline autoPtr<List<T>> clone() const;
   #+END_SRC

   emm, what is ~autoPtr<List<T>>~?

   Is this an autoPtr whose date type is ~List<T>~, which is another
   nested date type called ~List~ whose data type is <T>.

   This constructor looks interesting, the argument of it:

   ~const List<T>& a~.

   #+BEGIN_SRC c++
   //~/OpenFOAM-dev/src/OpenFOAM/containers/Lists/List/List.C
   //102
template<class T>
Foam::List<T>::List(const List<T>& a) 
:
    UList<T>(nullptr, a.size_)
{
    if (this->size_)
    {
        alloc();

        #ifdef USEMEMCPY
        if (contiguous<T>())
        {
            memcpy(this->v_, a.v_, this->byteSize());
        }
        else
        #endif
        {
            List_ACCESS(T, (*this), vp);
            List_CONST_ACCESS(T, a, ap);
            List_FOR_ALL((*this), i)
                List_ELEM((*this), vp, i) = List_ELEM(a, ap, i);
            List_END_FOR_ALL
        }
    }
}
   #+END_SRC

   Is this snippet code cause the termination?

   #+BEGIN_SRC c++
   template<class T>
Foam::List<T>::List(const List<T>& a)
:
    UList<T>(nullptr, a.size_)
{
    if (this->size_)
    {
        alloc();

        #ifdef USEMEMCPY
        if (contiguous<T>())
        {
            memcpy(this->v_, a.v_, this->byteSize()); // why do memcpy?
        }
        else
        #endif
        {
            List_ACCESS(T, (*this), vp);
            List_CONST_ACCESS(T, a, ap);
            List_FOR_ALL((*this), i)
                List_ELEM((*this), vp, i) = List_ELEM(a, ap, i);
            List_END_FOR_ALL
        }
    }
}
   #+END_SRC

   what does this mean?
   #+BEGIN_QUOTE
   Storage is not allocated during construction or use but is supplied to
    the constructor as an argument.  This type of list is particularly useful
    for lists that refer to parts of existing lists such as SubList.
   #+END_QUOTE

   What is the naming convention if a varible's name end up with an
   underline?

   My answer: priviate variable?

   ~Size_~ is a private data declared in ~UList.H~.
** DONE what is difference between ~UList~ and ~List~?
~UList~:
#+BEGIN_QUOTE
    A 1D vector of objects of type \<T\>, where the size of the vector is
    known and can be used for subscript bounds checking, etc.

    Storage is not allocated during construction or use but is supplied to
    the constructor as an argument.  This type of list is particularly useful
    for lists that refer to parts of existing lists such as SubList.
#+END_QUOTE

~List~:
#+BEGIN_QUOTE
    A 1D array of objects of type \<T\>, where the size of the vector
    is known and used for subscript bounds checking, etc.

    Storage is allocated on free-store during construction.
#+END_QUOTE

~SubList~
#+BEGIN_QUOTE
    A List obtained as a section of another List.

    Since the SubList is itself unallocated, no storage is allocated or
    de-allocated during its use.  To achieve this behaviour, SubList is
    derived from UList rather than List.
#+END_QUOTE
   what is the meaning of ~free-store during construction.~? Take away
   message is that the ~UList~ not allow storage during construction,
   whereas ~List~ is okay. But what does it mean: storage during
   construction?
** TODO Why there is nothing in Destructor
   #+BEGIN_SRC c++
   //194
   // Default Destructor
   #+END_SRC
** TODO prepare a issue for OF

   Dear OpenFOAM(OF) maintainers:

   I recently want to test the upper limitation of mesh size, i.e., what
   is the biggest size that OF could handle.

   This is the mesh ( a total number of 256000000 cells ) I build. I am
   sorry tha not using snappyHexMesh to build this mesh, instead, I use
   Ansys/ICEM 17.1 to build it.

   #+BEGIN_SRC 
$ checkMesh
/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.1                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
Build  : 4.1
Exec   : checkMesh
Date   : Jul 06 2018
Time   : 15:54:53
Host   : "cp0401"
PID    : 12872
Case   : /scratch/crazyuser/biggerMesh
nProcs : 1
sigFpe : Enabling floating point exception trapping (FOAM_SIGFPE).
fileModificationChecking : Monitoring run-time modified files using timeStampMaster
allowSystemOperations : Allowing user-supplied system call operations

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
Create time

Create polyMesh for time = 0

Time = 0

Mesh stats
    points:           257514000
    faces:            769512000
    internal faces:   766488000
    cells:            256000000
    faces per cell:   6
    boundary patches: 5
    point zones:      0
    face zones:       1
    cell zones:       1

Overall number of cells of each type:
    hexahedra:     256000000
    prisms:        0
    wedges:        0
    pyramids:      0
    tet wedges:    0
    tetrahedra:    0
    polyhedra:     0

Checking topology...
    Boundary definition OK.
    Cell to face addressing OK.
    Point usage OK.
    Upper triangular ordering OK.
    Face vertices OK.
    Number of regions: 1 (OK).

Checking patch topology for multiply connected surfaces...
    Patch               Faces    Points   Surface topology                  
    FRONT               1000000  1002000  ok (non-closed singly connected)  
    INLET               256000   257257   ok (non-closed singly connected)  
    OUTLET              256000   257257   ok (non-closed singly connected)  
    CYLINDER            512000   514000   ok (non-closed singly connected)  
    BACK                1000000  1002000  ok (non-closed singly connected)  

Checking geometry...
    Overall domain bounding box (-32 -32 0) (32 32 3.33332)
    Mesh has 3 geometric (non-empty/wedge) directions (1 1 1)
    Mesh has 3 solution (non-empty) directions (1 1 1)
    Boundary openness (-4.65606e-16 4.16736e-21 -4.97036e-16) OK.
    Max cell openness = 3.18122e-16 OK.
    Max aspect ratio = 29.4282 OK.
    Minimum face area = 1.3175e-06. Maximum face area = 0.0385213.  Face area magnitudes OK.
    Min volume = 1.71549e-08. Max volume = 0.000501578.  Total volume = 10720.6.  Cell volumes OK.
    Mesh non-orthogonality Max: 1.72876e-05 average: 0
    Non-orthogonality check OK.
    Face pyramids OK.
    Max skewness = 0.00266764 OK.
    Coupled point location match (average 0) OK.

Mesh OK.

End   
   #+END_SRC

   However, when running ~createPatch~ command:
#+BEGIN_SRC c++
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
Create time
 
Create polyMesh for time = 0
 
Reading createPatchDict
 
Adding new patch FRONT_CYC as patch 5 from 
{
    type            cyclic;
    neighbourPatch  BACK_CYC;
    matchTolerance  0.01;
}
 
Adding new patch BACK_CYC as patch 6 from 
{
    type            cyclic;
    neighbourPatch  FRONT_CYC;
    matchTolerance  0.01;
}
 
 
Moving faces from patch FRONT to patch 5
terminate called after throwing an instance of 'std::bad_array_new_length'
  what():  std::bad_array_new_length
#+END_SRC

I suspected this terminate call is from
~OpenFOAM-dev/src/dynamicMesh/polyTopoChange/polyTopoChange/modifyObject/polyModifyFace.H~
in this ~clone()~ function:
#+BEGIN_SRC c++
//- Construct and return a clone
virtual autoPtr<topoAction> clone() const
{
    return autoPtr<topoAction>(new polyModifyFace(*this));
}
#+END_SRC

As a newbiew in c++, I just jump into the source code without luck. I
get lost in finding which array causes the trouble.

One of my friend suggested me:

#+BEGIN_QUOTE
rebuilding OpenFOAM with a flag WM_LABEL_SIZE=64
#+END_QUOTE

He mentioned that the upper bond for 32 label size application has a
maximum capcity of 2^(N-1)-1, which is 2147483647. However, the
maximum number in the current case (faces) there is 769512000 faces.
** TODO attack from WM_LABEL_SIZE
#+BEGIN_SRC  sh
grep -rl "WM_LABEL_SIZE" ./*
./applications/utilities/postProcessing/graphics/PVReaders/PVblockMeshReader/CMakeLists.txt
./applications/utilities/postProcessing/graphics/PVReaders/PVFoamReader/CMakeLists.txt
./etc/bashrc
./etc/config.csh/settings
./etc/config.csh/unset
./etc/config.sh/settings
./etc/config.sh/unset
./etc/cshrc
./src/OpenFOAM/primitives/ints/label/label.C
./src/OpenFOAM/primitives/ints/label/label.H
./src/OpenFOAM/primitives/ints/uLabel/uLabel.C
./src/OpenFOAM/primitives/ints/uLabel/uLabel.H
./wmake/rules/General/general
#+END_SRC

In: ~/OpenFOAM-dev/etc/config.sh/settings~ ~export
WM_LABEL_OPTION=Int$WM_LABEL_SIZE~ Then, what is ~export~ meaning in
this setting file? [[https://superuser.com/questions/153371/what-does-export-do-in-bash][I read this page: exported variable get passed on
to child processes, not-exported variable do not.]] So, it's just a
variable definition.

So, what's ~WM_LABEL_OPTION~ really define?

It just construct another variable: ~export
WM_OPTIONS=$WM_ARCH$WM_COMPILER$WM_PRECISION_OPTION$WM_LABEL_OPTION$WM_COMPILE_OPTION~

So, what's $WM_OPTIONS$ really define?

I don't think I have enough background info in understanding what's
make file really is. So, I decide to go to basic about make system.
** DONE [[https://www.learncpp.com/cpp-tutorial/24-integers/#comment-377315][int_32 and int_64]]
   Does my OF a 32 version? How to check OF is a 32 or 64 version application?
   #+BEGIN_SRC sh
   $ file pisoFoam
   pisoFoam: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=66306ba1b0d4e34b5b7267398e679fb58d23c619, not stripped
   #+END_SRC

   what is ~size_t~?

   why 4 bytes is 32-bit?

   a byte has a total number of 256 states ( 0 through 255 ), which is
   ( 2 in power of 8 = 256 )

   So, 4 bytes, you gana have 4 * 8 = 32 bit states, which is ( 2 in
   power of 32 = 4294967296)

   Why I cannot build 64-bit project on my 64-bit machine?

   Yes you can, just choice x64 debugger.

   Following code illustrate that building doing a simple assignment,
   x32 is faster than x64.
   #+BEGIN_SRC c++
#include "pch.h"
#include <iostream>
#include <stdio.h>
#include <string>
#include <chrono>


using namespace std;

class Timer
{
private:
	// Type aliases to make accessing nested type easier                                                                                                                                          
	using clock_t = std::chrono::high_resolution_clock;
	using second_t = std::chrono::duration<double, std::ratio<1> >;

	std::chrono::time_point<clock_t> m_beg;

public:
	Timer() : m_beg(clock_t::now())
	{
	}

	void reset()
	{
		m_beg = clock_t::now();
	}

	double elapsed() const
	{
		return std::chrono::duration_cast<second_t>(clock_t::now() - m_beg).count();
	}
};

class dummy
{
private:
	int m_array[1];

public:
	dummy() // zero the member array                                                                                                                                                  
	{
		// If we want the array to have values, we'll have to use assignment here                                                                                                                    
		m_array[0] = 4294967295;
	}
};


int main()
{
	Timer x32_timer;
	dummy x32;
	std::cout << "Time elapsed: " << x32_timer.elapsed() << "\n";
	// x32 Time elapsed: 1.956e-06
	// x64 Time elapsed: 3.424e-06
	// almost 1.8 time slower.
    std::cout << "Hello World!\n";
}
   #+END_SRC
** something interesting
   cyclist: 1c1707e8a20719056bfc9a232527c5bd


* my stuip questions
** Allrun shell

   I notice that OpenFOAM use this command almost in every tutorial:

   #+BEGIN_SRC sh
     cd ${0%/*} || exit 1    # Run from this directory    
   #+END_SRC

   I usually delete this line then execute: `./Allrun'

   I checkout the bash manual ( This is Edition 4.2, last updated 28
December 2010, of 'The GNU Bash Reference Manual', for 'Bash', Version
4.2. )

   At the page: 3.4.2 Special Parameters

   #+BEGIN_QUOTE
   '0'
     Expands to the name of the shell or shell script.  This is set at
     shell initialization.  If Bash is invoked with a file of commands
     (*note Shell Scripts::), '$0' is set to the name of that file.  If
     Bash is started with the '-c' option (*note Invoking Bash::), then
     '$0' is set to the first argument after the string to be executed,
     if one is present.  Otherwise, it is set to the filename used to
     invoke Bash, as given by argument zero.

   #+END_QUOTE

   I also check '-c' option on page: 6.1 Invoking Bash
   #+BEGIN_QUOTE
   '-c STRING'
     Read and execute commands from STRING after processing the options,
     then exit.  Any remaining arguments are assigned to the positional
     parameters, starting with '$0'.
   
   #+END_QUOTE

   Interesting, when I use the command: `bash -c ./Allrun'

   It works.


   Why they put this line here?

   
